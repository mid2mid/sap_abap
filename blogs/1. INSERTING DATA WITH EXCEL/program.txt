*&---------------------------------------------------------------------*
*& Report YDSA_INSERT_TABLE
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT YDSA_INSERT_TABLE.

" ==========================================
" VARIABLE
" ==========================================
TYPES: BEGIN OF GTY_FILE,
         NAME TYPE LOCALFILE,
         PATH TYPE LOCALFILE,
         FULL TYPE LOCALFILE,
         EXT  TYPE LOCALFILE,
         SIZE TYPE INT4,
       END OF GTY_FILE.
TYPES: BEGIN OF GTY_TABLE_EXT,
         ZXXBOX TYPE CHAR1,
         ZXXMSG TYPE CHAR100,
       END OF GTY_TABLE_EXT.

DATA: GT_DD02L      TYPE STANDARD TABLE OF DD02L WITH HEADER LINE,
      GT_TABLE_EXT  TYPE STANDARD TABLE OF GTY_TABLE_EXT WITH HEADER LINE,
      GS_FILE       TYPE GTY_FILE,
      GV_INT        TYPE I,
      GV_ZXXBOX     TYPE C LENGTH 10 VALUE 'ZXXBOX',
      GV_ZXXMSG     TYPE C LENGTH 10 VALUE 'ZXXMSG',
      GREF_TABLE   TYPE REF TO DATA,
      GREF_STRUC   TYPE REF TO DATA,
      GR_STRUCDESCR TYPE REF TO CL_ABAP_STRUCTDESCR,
      GT_COMPONENTS TYPE ABAP_COMPONENT_TAB,
      GS_COMPONENTS TYPE LINE OF ABAP_COMPONENT_TAB.
DATA: GO_DATA       TYPE REF TO CL_ABAP_DATADESCR.
DATA: GO_TABLE      TYPE REF TO CL_ABAP_TABLEDESCR.
DATA: GO_STRUCDESCR TYPE REF TO CL_ABAP_STRUCTDESCR.

FIELD-SYMBOLS: <GT_TABLE>  TYPE TABLE,
               <GT_DATA>   TYPE TABLE,
               <GS_DATA>   TYPE ANY,
               <GS_TABLE>  TYPE ANY,
               <GV_ANY>    TYPE ANY.

** DATA FOR EXCEL
DATA: GT_EXCEL         TYPE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE,
      GT_EXCEL_ROW     TYPE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE,
      GT_EXCEL_ROW2    TYPE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE,
      GT_EXCEL_HEADER  TYPE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE,
      GT_EXCEL_CONTENT TYPE STANDARD TABLE OF ALSMEX_TABLINE WITH HEADER LINE.
** DATA FOR ALV
DATA: GT_FCAT TYPE SLIS_T_FIELDCAT_ALV WITH HEADER LINE,        " FIELDCAT
      GS_LAYO TYPE SLIS_LAYOUT_ALV.                             " LAYOUT ALV

" ==========================================
" INPUTAN
" ==========================================
SELECTION-SCREEN BEGIN OF BLOCK B01 WITH FRAME TITLE TEXT-001.
PARAMETERS:
  P_TABLE  TYPE TABNAME16 OBLIGATORY DEFAULT '',
  P_FILE   TYPE GTY_FILE-FULL OBLIGATORY DEFAULT '',
  P_HEADER TYPE I DEFAULT 1 OBLIGATORY,
  P_START  TYPE I DEFAULT 2 OBLIGATORY,
  P_END    TYPE I DEFAULT 50 OBLIGATORY.
SELECTION-SCREEN END OF BLOCK B01.

" ==========================================
" EVENT SEARCH HELP FILE
" ==========================================
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  PERFORM F_FILE_GET_EXCEL USING '' CHANGING GS_FILE.
  P_FILE = GS_FILE-FULL.

" ==========================================
" EVENT START OF SELECTION
" ==========================================
START-OF-SELECTION.
  " AUTH TABLE
  IF P_TABLE NE 'YDSDT0001'.
    PERFORM F_MESSAGE_EXIT USING 'PROGRAM INI MASIH DEVELOP HANYA BISA TABLE YDSDT0001 SAJA' 'LIST'.
  ENDIF.
  IF P_TABLE NP 'Z*' AND P_TABLE NP 'Y*'.
    PERFORM F_MESSAGE_EXIT USING 'PROGRAM INI HANYA UNTUK Z ATAU Y TABLE' 'LIST'.
  ENDIF.
  CLEAR: GS_FILE.
  GS_FILE-FULL = P_FILE.
  SELECT SINGLE * INTO GT_DD02L FROM DD02L WHERE TABNAME = P_TABLE.
  IF SY-SUBRC <> 0.
    PERFORM F_MESSAGE_EXIT USING 'TABLE NOT FOUND' 'LIST'.
  ENDIF.

  " EXCEL FILE PROCESS
  PERFORM F_FM_EXCEL  TABLES GT_EXCEL
                       USING GS_FILE-FULL
                             1
                             P_END.
  " GET ATRIBUT FILE
  PERFORM F_FILE_SPLIT_PATH   USING GS_FILE-FULL
                           CHANGING GS_FILE-PATH
                                    GS_FILE-NAME.
  PERFORM F_FILE_GET_EXTENSION    USING GS_FILE-FULL
                               CHANGING GS_FILE-EXT.

  " GET HEADER FOR MAPPING DATA
  LOOP AT GT_EXCEL.
    IF GT_EXCEL-ROW EQ P_HEADER.
      GT_EXCEL_HEADER = GT_EXCEL.
      APPEND GT_EXCEL_HEADER.
    ENDIF.
    IF GT_EXCEL-ROW >= P_START AND GT_EXCEL-ROW <= P_END.
      GT_EXCEL_CONTENT = GT_EXCEL.
      APPEND GT_EXCEL_CONTENT.
    ENDIF.
  ENDLOOP.

  " CREATING VARIABLE
  CREATE DATA GREF_TABLE TYPE TABLE OF (P_TABLE).
  CREATE DATA GREF_STRUC TYPE (P_TABLE).
  ASSIGN GREF_STRUC->* TO <GS_TABLE>.
  ASSIGN GREF_TABLE->* TO <GT_TABLE>.

  PERFORM F_GET_COMPONENTS_BY_DATA TABLES GT_COMPONENTS
                                    USING GT_TABLE_EXT.
  PERFORM F_GET_COMPONENTS_BY_DATA_REF TABLES GT_COMPONENTS
                                        USING GREF_STRUC.

  GO_STRUCDESCR ?= CL_ABAP_STRUCTDESCR=>CREATE( P_COMPONENTS = GT_COMPONENTS ).
  CREATE DATA GREF_STRUC TYPE HANDLE GO_STRUCDESCR.
  GO_DATA ?= CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA_REF( GREF_STRUC ).
  GO_TABLE ?= CL_ABAP_TABLEDESCR=>CREATE( P_LINE_TYPE = GO_DATA ).
  CREATE DATA GREF_TABLE TYPE HANDLE GO_TABLE.
  ASSIGN GREF_TABLE->* TO <GT_DATA>.
  ASSIGN GREF_STRUC->* TO <GS_DATA>.

  " INSERTING/MAPPING DATA
  SORT GT_EXCEL_CONTENT BY ROW COL.
  SORT GT_EXCEL_HEADER BY ROW COL.
  LOOP AT GT_EXCEL_CONTENT.
    IF GV_INT NE GT_EXCEL_CONTENT-ROW.
      IF <GS_DATA> IS NOT INITIAL.
        APPEND <GS_DATA> TO <GT_DATA>.
      ENDIF.
      CLEAR: <GS_DATA>.
    ENDIF.
    GV_INT = GT_EXCEL_CONTENT-ROW.
    READ TABLE GT_EXCEL_HEADER WITH KEY COL = GT_EXCEL_CONTENT-COL BINARY SEARCH.
    CHECK SY-SUBRC EQ 0.
    ASSIGN COMPONENT GT_EXCEL_HEADER-VALUE OF STRUCTURE <GS_DATA> TO <GV_ANY>.
    CHECK SY-SUBRC EQ 0.
    <GV_ANY> = GT_EXCEL_CONTENT-VALUE.
    AT LAST.
      IF <GS_DATA> IS NOT INITIAL.
        APPEND <GS_DATA> TO <GT_DATA>.
      ENDIF.
      CLEAR: <GS_DATA>.
    ENDAT.
  ENDLOOP.
  " ALV
  PERFORM F_ALV_SHOW.

" ==========================================
" SUBROUNTINES
" ==========================================
FORM F_GET_COMPONENTS_BY_DATA  TABLES TT_TABLE STRUCTURE GS_COMPONENTS
                                USING UT_TABLE TYPE ANY.
  DATA: LC_STRUCDESCR TYPE REF TO CL_ABAP_STRUCTDESCR,
        LT_COMPONENTS TYPE ABAP_COMPONENT_TAB WITH HEADER LINE.
  LC_STRUCDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA( UT_TABLE ).
  LOOP AT LC_STRUCDESCR->GET_COMPONENTS( ) INTO LT_COMPONENTS.
    APPEND LT_COMPONENTS TO TT_TABLE.
  ENDLOOP.
ENDFORM.
FORM F_GET_COMPONENTS_BY_DATA_REF  TABLES TT_TABLE STRUCTURE GS_COMPONENTS
                                    USING UT_REF   TYPE ANY.
  DATA: LC_STRUCDESCR TYPE REF TO CL_ABAP_STRUCTDESCR,
        LT_COMPONENTS TYPE ABAP_COMPONENT_TAB WITH HEADER LINE.
  LC_STRUCDESCR ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA_REF( UT_REF ).
  LOOP AT LC_STRUCDESCR->GET_COMPONENTS( ) INTO LT_COMPONENTS.
    APPEND LT_COMPONENTS TO TT_TABLE.
  ENDLOOP.
ENDFORM.

FORM F_ALV_SHOW.

  REFRESH:  GT_FCAT.
  CLEAR:    GT_FCAT, GS_LAYO.


  GS_LAYO-ZEBRA               = 'X'.
  GS_LAYO-COLWIDTH_OPTIMIZE   = 'X'.
  GS_LAYO-BOX_FIELDNAME       = GV_ZXXBOX.

  PERFORM F_ALV_FCAT TABLES GT_FCAT.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM       = SY-REPID
      I_CALLBACK_PF_STATUS_SET = 'F_ALV_PF_STATUS'
      I_CALLBACK_USER_COMMAND  = 'F_ALV_UCOMM'
      IT_FIELDCAT              = GT_FCAT[]
      IS_LAYOUT                = GS_LAYO
      I_SAVE                   = 'X'
    TABLES
      T_OUTTAB                 = <GT_DATA>.
  IF SY-SUBRC NE 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.

FORM F_ALV_FCAT TABLES TT_FIELDCAT STRUCTURE GT_FCAT.
  DATA: LS_COMPONENTS TYPE ABAP_COMPDESCR.
  DATA: LO_STRUCDESCR TYPE REF TO CL_ABAP_STRUCTDESCR.
  LO_STRUCDESCR ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_DATA( <GS_DATA> ).
  LOOP AT LO_STRUCDESCR->COMPONENTS INTO LS_COMPONENTS.
    IF LS_COMPONENTS-NAME EQ GV_ZXXBOX.
      CONTINUE.
    ENDIF.
    PERFORM F_ALV_APPEND_FCAT TABLES GT_FCAT USING LS_COMPONENTS-NAME LS_COMPONENTS-NAME.
  ENDLOOP.
ENDFORM.

FORM F_ALV_UCOMM  USING UV_UCOMM TYPE SY-UCOMM
                        US_FIELD TYPE SLIS_SELFIELD.
  CASE UV_UCOMM.
    WHEN 'INSE'.
      LOOP AT <GT_DATA> ASSIGNING <GS_DATA>.
        ASSIGN COMPONENT GV_ZXXBOX OF STRUCTURE <GS_DATA> TO <GV_ANY>.
        CHECK SY-SUBRC EQ 0.
        CHECK <GV_ANY> IS NOT INITIAL.
        ASSIGN COMPONENT GV_ZXXMSG OF STRUCTURE <GS_DATA> TO <GV_ANY>.
        CHECK SY-SUBRC EQ 0.
        MOVE-CORRESPONDING <GS_DATA> TO <GS_TABLE>.
        MODIFY (P_TABLE) FROM <GS_TABLE>.
        CASE SY-SUBRC.
          WHEN 0.
            <GV_ANY> = 'Berhasil Insert Data'.
          WHEN OTHERS.
            <GV_ANY> = 'Gagal Insert Data'.
        ENDCASE.
*        APPEND <GS_TABLE> TO <GT_TABLE>.
      ENDLOOP.
      US_FIELD-REFRESH = 'X'.
  ENDCASE.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SET_PF_STATUS
*&---------------------------------------------------------------------*
*       Set PF_STATUS STANDARD modifying the standard toolbar
*       by excluding some buttons
*----------------------------------------------------------------------*
*      -->P_IT_EXTAB  -- TABLE OF EXCLUDING FUNCTIONS
*----------------------------------------------------------------------*
FORM F_ALV_PF_STATUS USING UT_EXTAB TYPE SLIS_T_EXTAB.
  DATA: LT_EXTAB           TYPE STANDARD TABLE OF SLIS_EXTAB WITH HEADER LINE.
*  LT_EXTAB-FCODE = 'INSE'.
*  APPEND LT_EXTAB.
  SET PF-STATUS 'ZSTANDARD' EXCLUDING LT_EXTAB.
ENDFORM.                               " SET_PF_STATUS

FORM F_ALV_APPEND_FCAT  TABLES TT_FCAT STRUCTURE GT_FCAT
                         USING UV_FIELDNAME
                               UV_TEXTM.
  CLEAR: TT_FCAT.
  TT_FCAT-FIELDNAME = UV_FIELDNAME.
  TT_FCAT-SELTEXT_M = UV_TEXTM.
  APPEND TT_FCAT.
ENDFORM.


FORM F_MESSAGE_EXIT   USING UV_MESSAGE
                            UV_TYPE.
  CASE UV_TYPE.
    WHEN 'LIST'.
      MESSAGE UV_MESSAGE TYPE 'S' DISPLAY LIKE 'E'.
      LEAVE LIST-PROCESSING.
    WHEN OTHERS.
      MESSAGE UV_MESSAGE TYPE 'E'.
  ENDCASE.
ENDFORM.

FORM F_FILE_GET_EXCEL   USING   UV_ROOT
                     CHANGING   CS_FILE TYPE GTY_FILE.
  DATA: LS_FILE TYPE GTY_FILE,
        LV_ROOT TYPE CHAR100.
  LV_ROOT = UV_ROOT.
  IF LV_ROOT IS INITIAL.
    LV_ROOT = 'C:\'.
  ENDIF.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      DEF_FILENAME     = ' '
      DEF_PATH         = LV_ROOT
      MASK             = ',Microsoft Excel,*.xls*.'
      MODE             = 'O'
      TITLE            = 'Select Microsoft Excel File'
    IMPORTING
      FILENAME         = LS_FILE-FULL
    EXCEPTIONS
      INV_WINSYS       = 1
      NO_BATCH         = 2
      SELECTION_CANCEL = 3
      SELECTION_ERROR  = 4
      OTHERS           = 5.
  IF SY-SUBRC EQ 0.
    CS_FILE = LS_FILE.
  ENDIF.
ENDFORM.

FORM F_FILE_SPLIT_PATH    USING UV_FULL  TYPE GTY_FILE-FULL
                       CHANGING CV_PATH  TYPE GTY_FILE-PATH
                                CV_NAME  TYPE GTY_FILE-NAME.
  CLEAR: CV_PATH, CV_NAME.
  CALL FUNCTION 'SO_SPLIT_FILE_AND_PATH'
    EXPORTING
      FULL_NAME     = UV_FULL
    IMPORTING
      STRIPPED_NAME = CV_NAME
      FILE_PATH     = CV_PATH
    EXCEPTIONS
      X_ERROR       = 1
      OTHERS        = 2.
ENDFORM.

FORM F_FILE_GET_EXTENSION    USING UV_FULL  TYPE GTY_FILE-FULL
                          CHANGING CV_EXT   TYPE GTY_FILE-EXT.
  CLEAR: CV_EXT.
  CALL FUNCTION 'TRINT_FILE_GET_EXTENSION'
    EXPORTING
      FILENAME  = UV_FULL
*     UPPERCASE = 'X'
    IMPORTING
      EXTENSION = CV_EXT.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_FM_EXCEL
*&---------------------------------------------------------------------*
*       CALL FUNCTION FOR READ FILE EXCEL
*----------------------------------------------------------------------*
*      -->LF_FNAME   FILE LOCATION
*      -->LF_BEROW   BEGIN ROW FOR SCAN EXCEL
*      -->LF_ENROW   END ROW FOR SCAN EXCEL
*----------------------------------------------------------------------*
FORM F_FM_EXCEL   TABLES TT_EXCEL STRUCTURE GT_EXCEL
                   USING UV_FILE  TYPE GTY_FILE-FULL
                         UV_BEROW TYPE I
                         UV_ENROW TYPE I.
  REFRESH: TT_EXCEL.
  CLEAR: TT_EXCEL.
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      FILENAME                = UV_FILE
      I_BEGIN_ROW             = UV_BEROW
      I_END_ROW               = UV_ENROW
      I_BEGIN_COL             = 1
      I_END_COL               = 200
    TABLES
      INTERN                  = TT_EXCEL
    EXCEPTIONS
      INCONSISTENT_PARAMETERS = 1
      UPLOAD_OLE              = 2
      OTHERS                  = 3.
  IF SY-SUBRC <> 0.
    PERFORM F_MESSAGE_EXIT USING 'FAILED TO OPEN/EXTRACT DATA EXCEL' 'LIST'.
  ENDIF.

  SORT TT_EXCEL BY ROW COL.
ENDFORM.                    "F_FM_EXCEL
